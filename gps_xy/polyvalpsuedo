function [y, dy] = polyval (p, x, s = [], mu)

  if (nargin < 2 || nargin > 4 || (nargout == 2 && nargin < 3))
    print_usage ();
  endif

  if (isempty (x))
    y = [];
    return;
  elseif (isempty (p))
    y = zeros (size (x));
    return;
  elseif (! isvector (p))
    error ("polyval: first argument must be a vector");
  endif

  if (nargin > 3)
    x = (x - mu(1)) / mu(2);
  endif

  n = length (p) - 1;
  y = p(1) * ones (size (x));
  for i = 2:n+1
    y = y .* x + p(i);
  endfor

  if (nargout == 2)
    ## Note: the F-Distribution is generally considered to be single-sided.
    ## http://www.itl.nist.gov/div898/handbook/eda/section3/eda3673.htm
    ##   t = finv (1-alpha, s.df, s.df);
    ##   dy = t * sqrt (1 + sumsq (A/s.R, 2)) * s.normr / sqrt (s.df)
    ## If my inference is correct, then t must equal 1 for polyval.
    ## This is because finv (0.5, n, n) = 1.0 for any n.
    try
      k = numel (x);
      A = (x(:) * ones (1, n+1)) .^ (ones (k, 1) * (n:-1:0));
      dy = sqrt (1 + sumsq (A/s.R, 2)) * s.normr / sqrt (s.df);
      dy = reshape (dy, size (x));
    catch
      if (isempty (s))
        error ("polyval: third input is required.")
      elseif (isstruct (s)
              && all (ismember ({"R", "normr", "df"}, fieldnames (s))))
        error (lasterr ())
      elseif (isstruct (s))
        error ("polyval: third input is missing the required fields.");
      else
        error ("polyval: third input is not a structure.");
      endif
    end_try_catch
  endif

endfunction
